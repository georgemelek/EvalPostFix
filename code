#include <iostream>
#include <stdexcept>
#include <string>
#include <sstream>
using namespace std;

class PrecondViolatedExcept: public logic_error {
    public:
        PrecondViolatedExcept(const string& message = "");
};

template<class T>
class dynArrStack {
    private:
        static const int deCap = 30;
        int top;
        T* items; // array in the dynamic memory storage
    public:
        dynArrStack() : top(-1) { items = new T[deCap]; } //default constructor
        dynArrStack(const dynArrStack<T>& rhs); //copy constructor
        ~dynArrStack() { delete [] items; top = -1; } //destructor
        dynArrStack<T>& operator=( const dynArrStack<T>& rhs ){ //overloaded assignment operator
            top = rhs.top;
            delete[] items;
            items = new T[deCap];
            for(int i=0; i <= top; i++) {
                items[i] = rhs.items[i];
            }
            return *this;
        }
        bool isEmpty() const;
        bool push(const T& nEntry);
        bool pop();
        T peek() const throw(PrecondViolatedExcept);
        T peek2() const throw(PrecondViolatedExcept);
        int size() const { return top + 1; }
};

template <class T>
T evalPostFix(dynArrStack<T>& stack, string& str);

int main()
{
    dynArrStack<double> test;
    string str = "25.4 3.0 10.2 * + 9.5 - q";

    evalPostFix(test, str);
    cout << test.peek() << endl;
    return 0;
}


PrecondViolatedExcept::PrecondViolatedExcept(const string& message): logic_error("Precondition Violated Exception: " + message) {}

//Copy Constructor
template<class T>
dynArrStack<T>::dynArrStack(const dynArrStack<T>& rhs){
    top = rhs.top;
    items = new T[deCap];
    for(int i=0; i <= top; i++) { //traverses through the existing rhs stack array and copies each elem to new one
        items[i] = rhs.items[i];
    }
}

//Checks if there are no elements
template<class T>
bool dynArrStack<T>::isEmpty() const{
    return top < 0; //only way stack array is empty is if top =-1, as thats given value in default constructor
}

//Adds an element to the top of the stack
template<class T>
bool dynArrStack<T>::push(const T& nEntry){
    bool result = false;
    if(top+1<deCap){ //top+1 b/c starts at top=-1, first elem is top=0, deCap is from 1-deCap, not index value
        top++;
        items[top] = nEntry;
        result = true;
    }
    return result;
}

//Removes an element from the top
template<class T>
bool dynArrStack<T>::pop(){
    bool result = false;
    if (-1<=top-1){ //only removes if there is at least one element in the arraystack already
        top--;
        result = true;
    }
    return result;
}

//Only looks at the the top element and returns its value, returns error if can't
template<class T>
T dynArrStack<T>::peek() const throw(PrecondViolatedExcept){
    if(top+1<1){ //can not return elem if arraystack is empty (-1+1)=0<1
        throw PrecondViolatedExcept("peek() called with empty stack");
    }
    return items[top];
}

//Looks at the second-to-top element and returns its value, returns error if can't
template<class T>
T dynArrStack<T>::peek2() const throw(PrecondViolatedExcept){
    if(top+1<2){ //cannot return elem if array stack does not have more than 2 elems (top=1,+1=2)
        throw PrecondViolatedExcept("peek2() called with less than 2 elements");
    }
    return items[top-1];
}
//Non-member function that alters the stack given as a paramter
template <class T>
T evalPostFix(dynArrStack<T>& stack, string& str){
    stringstream expression{str}; //Converts string to stringstream so we can make string to int later
    string elem;
    while(expression >> elem){ //continues taking numbers, separated by space
        if(elem == "+"){ //Adds the top two elems
            double topNum = stack.peek();
            double bottomNum = stack.peek2();
            stack.pop();
            stack.pop();
            stack.push(topNum+bottomNum);
        }
        else if(elem == "*"){ //Multiplies the top two elems
            double topNum = stack.peek();
            double bottomNum = stack.peek2();
            stack.pop();
            stack.pop();
            stack.push(topNum*bottomNum);
        }
        else if(elem == "-"){ //Subtracts bottomNum-topNum
            double topNum = stack.peek();
            double bottomNum = stack.peek2();
            stack.pop();
            stack.pop();
            stack.push(bottomNum-topNum);
        }
        else if(elem == "/"){ //Divides bottomNum-topNum
            double topNum = stack.peek();
            double bottomNum = stack.peek2();
            stack.pop();
            stack.pop();
            stack.push(bottomNum/topNum);
        }
        else if(elem == "q"){ //"q" is given as end of equation
            break;
        }
        else{ //If not operator or q, must be a number, so we push it onto the stack
            stringstream str2Int(elem); 
            float x = 0; 
            str2Int >> x; 
            stack.push(x);
        }
        
    }
    return stack.peek(); //returns the top value which will be the final answer
}
